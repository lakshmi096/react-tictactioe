{"version":3,"sources":["components/Icon.js","App.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","toastId","filter","item","length","checkIsWinner","displayMessage","Button","block","onClick","itemGrid","map","index","Card","key","CardBody","Container","position","Row","Col","md","ReactDOM","render","document","getElementById"],"mappings":"2NAceA,EAXF,SAAC,GACZ,OADyB,EAAXC,MAEZ,IAAK,SACH,OAAO,kBAAC,IAAD,CAAaC,UAAU,UAChC,IAAK,QACH,OAAO,kBAAC,IAAD,CAASA,UAAU,UAC5B,QACE,OAAO,kBAAC,IAAD,CAAOA,UAAU,Y,+DCAxBC,G,YAAY,IAAIC,MAAM,GAAGC,KAAK,UA4HrBC,EA1HH,WAAO,IAAD,EACcC,oBAAS,GADvB,mBACTC,EADS,KACAC,EADA,OAEoBF,mBAAS,IAF7B,mBAETG,EAFS,KAEGC,EAFH,KAoEVC,EAAa,SAAAC,GACjB,OAAIH,EACKI,YAAMJ,EAAY,CAAEK,KAAM,UAAWC,QAASH,IAGzB,UAA1BV,EAAUU,GAILC,YAAM,iBAAkB,CAAEC,KAAM,QAASC,QAASH,KAHzDV,EAAUU,GAAcL,EAAU,QAAU,SAC5CC,GAAYD,QAjEM,WAEpB,GACEL,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,cACR,GACY,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,cACR,GACY,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,cACR,GACY,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,cACR,GACY,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,cACR,GACY,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,cACR,GACY,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,cACR,GACY,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,aACR,CACaA,EAAUc,QAAO,SAAAC,GAAI,MAAa,UAATA,KAC3BC,SAAWhB,EAAUgB,QACnCR,EAAc,cAiBlBS,KAGIC,EAAiBX,EACrB,yBAAKR,UAAU,aACb,wBAAIA,UAAU,0CACXQ,GAEH,kBAACY,EAAA,EAAD,CAAQpB,UAAU,aAAaqB,OAAK,EAACC,QApFtB,WACjBf,GAAW,GACXE,EAAc,IACdR,EAAUE,KAAK,QAAS,EAAG,KAiFzB,aAGA,wBAAIH,UAAW,yCACZM,EAAU,QAAU,SADvB,WAMEiB,EAAWtB,EAAUuB,KAAI,SAACR,EAAMS,GACpC,OACE,kBAACC,EAAA,EAAD,CAAMC,IAAKF,EAAOzB,UAAW,UAAYgB,EAAMM,QAAS,kBAAMZ,EAAWe,KACvE,kBAACG,EAAA,EAAD,CAAU5B,UAAU,OAClB,kBAAC,EAAD,CAAMD,KAAMiB,SAMpB,OACE,kBAACa,EAAA,EAAD,CAAW7B,UAAU,OACnB,kBAAC,IAAD,CAAgB8B,SAAS,kBACzB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGjC,UAAU,eACnBmB,EACD,yBAAKnB,UAAU,QACZuB,OC1HbW,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e349cb08.chunk.js","sourcesContent":["import React from \"react\";\nimport { FaTimes, FaPen, FaRegCircle } from \"react-icons/fa\";\n\nconst Icon = ({ name }) => {\n  switch (name) {\n    case \"circle\":\n      return <FaRegCircle className=\"icons\" />;\n    case \"cross\":\n      return <FaTimes className=\"icons\" />;\n    default:\n      return <FaPen className=\"icons\" />;\n  }\n};\n\nexport default Icon;\n","import React, { useState } from \"react\";\nimport Icon from \"./components/Icon\";\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport { Card, CardBody, Container, Button, Col, Row } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\n\nconst itemArray = new Array(9).fill(\"empty\");\n\nconst App = () => {\n  const [isCross, setIsCross] = useState(false);\n  const [winMessage, setWinMessage] = useState(\"\");\n\n  const reloadGame = () => {\n    setIsCross(false);\n    setWinMessage(\"\");\n    itemArray.fill(\"empty\", 0, 9);\n  };\n\n  const checkIsWinner = () => {\n    //  checking  winner of the game\n    if (\n      itemArray[0] === itemArray[1] &&\n      itemArray[0] === itemArray[2] &&\n      itemArray[0] !== \"empty\"\n    ) {\n      setWinMessage(`${itemArray[0]} won`);\n    } else if (\n      itemArray[3] !== \"empty\" &&\n      itemArray[3] === itemArray[4] &&\n      itemArray[4] === itemArray[5]\n    ) {\n      setWinMessage(`${itemArray[3]} won`);\n    } else if (\n      itemArray[6] !== \"empty\" &&\n      itemArray[6] === itemArray[7] &&\n      itemArray[7] === itemArray[8]\n    ) {\n      setWinMessage(`${itemArray[6]} won`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[3] &&\n      itemArray[3] === itemArray[6]\n    ) {\n      setWinMessage(`${itemArray[0]} won`);\n    } else if (\n      itemArray[1] !== \"empty\" &&\n      itemArray[1] === itemArray[4] &&\n      itemArray[4] === itemArray[7]\n    ) {\n      setWinMessage(`${itemArray[1]} won`);\n    } else if (\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[5] &&\n      itemArray[5] === itemArray[8]\n    ) {\n      setWinMessage(`${itemArray[2]} won`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[4] &&\n      itemArray[4] === itemArray[8]\n    ) {\n      setWinMessage(`${itemArray[0]} won`);\n    } else if (\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[4] &&\n      itemArray[4] === itemArray[6]\n    ) {\n      setWinMessage(`${itemArray[2]} won`);\n    } else {\n      let itemsFilled = itemArray.filter(item => item !== \"empty\");\n      if (itemsFilled.length === itemArray.length) {\n        setWinMessage(`No winner`);\n      }\n    }\n  };\n\n  const changeItem = itemNumber => {\n    if (winMessage) {\n      return toast(winMessage, { type: \"success\", toastId: itemNumber });\n    }\n\n    if (itemArray[itemNumber] === \"empty\") {\n      itemArray[itemNumber] = isCross ? \"cross\" : \"circle\";\n      setIsCross(!isCross);\n    } else {\n      return toast(\"Already filled\", { type: \"error\", toastId: itemNumber });\n    }\n\n    checkIsWinner();\n  };\n\n  const displayMessage = winMessage ? (\n    <div className=\"mb-2 mt-2\">\n      <h1 className=\"text-winner text-center text-uppercase\">\n        {winMessage}\n      </h1>\n      <Button className=\"player-won\" block onClick={reloadGame}> Reload </Button>\n    </div>\n  ) : (\n      <h1 className={\"turn-text text-center text-uppercase \"}>\n        {isCross ? \"Cross\" : \"Circle\"}'s turn\n      </h1>\n    )\n\n\n  const itemGrid = itemArray.map((item, index) => {\n    return (\n      <Card key={index} className={\"ripple \" + item} onClick={() => changeItem(index)}>\n        <CardBody className=\"box\">\n          <Icon name={item} />\n        </CardBody>\n      </Card>\n    )\n  })\n\n  return (\n    <Container className=\"p-5\">\n      <ToastContainer position=\"bottom-center\" />\n      <Row>\n        <Col md={6} className=\"offset-md-3\">\n          {displayMessage}\n          <div className=\"grid\">\n            {itemGrid}\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}